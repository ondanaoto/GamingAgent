import time
import os
import numpy as np

from tools.utils import (
    log_output,
    build_iteration_content,
    find_iteration_dirs,
    extract_planning_prompt,
    read_log_to_string,
)
from tools.serving.api_providers import (
    anthropic_multiimage_completion,
    openai_multiimage_completion,
    gemini_multiimage_completion,
)


def tetris_speculator(
    thread_id,
    offset,
    speculator_system_prompt,
    api_provider,
    model_name,
    memory_size,
    wait_time,
):
    """
    A single Tetris speculator that analyze past experience
    to guide better gameplay planning for the workers.
    """
    all_response_time = []
    cache_base_path = "cache/tetris"

    print(f"[Speculator thread {thread_id}] put into sleeping...")
    time.sleep(offset)
    print(
        f"[Speculator thread {thread_id}] starting after {offset}s delay... (VLM planning memory size: {memory_size})"
    )

    tetris_speculator_prompt_template = """
You are the Tetris Speculator. You receive screenshots and code generated by yourself from prior moves.
Summarize your insights as bullet-by-bullet “empirical lessons learned”.

## Empirical Learning:
Identify any inconsistency between itention from a prior step (text comments) vs. game state after the code is executed:
- Any kinds of grid unit counting errors: e.g. the intention is to move a block all the way to one side with x steps, but y steps were executed.
- Geometric shape perception problem: e.g. misinterpreting Z-shape into L-shape. 
- Rotation errors: when an error occurs, for each shape, analyze how many clockwise rotation operations should have been performed.

Summarize the inconsistencies, produce some generalizable rules. 

## Past Experience Synthesis
Finally, look at the following “empirical lessons learned” from past iterations. Consolidate and produce a single 'planning prompt' enclosed in triple backticks labeled as `planning prompt`. Be specific and qualitative (make useful to future game rounds).
{past_experience_summary}

## Output Format:
```planning prompt
- <Your bullet 1>
- <Your bullet 2>
- ...
```
"""

    log_path = f"cache/tetris/thread_{thread_id}/planner/experience_summary.log"
    try:
        while True:
            if os.path.exists(log_path):
                experience_summary = read_log_to_string(log_path)
            else:
                experience_summary = "- No lessons learned so far."

            tetris_speculator_prompt = tetris_speculator_prompt_template.format(
                past_experience_summary=experience_summary
            )

            # base_path in cache/tetris
            iteration_dirs = find_iteration_dirs(cache_base_path)
            print("iteration dir:")
            print(iteration_dirs)

            list_content, list_image_base64 = build_iteration_content(
                iteration_dirs, memory_size
            )
            print("text & img content list built.")
            print(f"content size: {len(list_content)}")
            print(f"img size: {len(list_image_base64)}")

            if not list_content or not list_image_base64:
                print(f"no valid content found... sleeping for {wait_time}s...")
                time.sleep(wait_time)
                continue

            start_time = time.time()
            if api_provider == "anthropic":
                generated_str = anthropic_multiimage_completion(
                    speculator_system_prompt,
                    model_name,
                    tetris_speculator_prompt,
                    list_content,
                    list_image_base64,
                )
            elif api_provider == "openai":
                generated_str = openai_multiimage_completion(
                    speculator_system_prompt,
                    model_name,
                    tetris_speculator_prompt,
                    list_content,
                    list_image_base64,
                )
            elif api_provider == "gemini":
                generated_str = gemini_multiimage_completion(
                    speculator_system_prompt,
                    model_name,
                    tetris_speculator_prompt,
                    list_content,
                    list_image_base64,
                )
            else:
                raise NotImplementedError(
                    f"API provider: {api_provider} is not supported."
                )

            end_time = time.time()
            latency = end_time - start_time
            all_response_time.append(latency)

            print(f"[Speculator thread {thread_id}] request latency: {latency:.2f}s")
            avg_latency = np.mean(all_response_time)
            print(f"[Speculator thread {thread_id}] latencies: {all_response_time}")
            print(
                f"[Speculator thread {thread_id}] average latency: {avg_latency:.2f}s\n"
            )

            print(
                "======================================================================"
            )
            print(
                f"[Speculator thread {thread_id}] --- API output ---\n{generated_str}\n"
            )
            print(
                "======================================================================"
            )

            # Extract latest gaming planning prompt
            try:
                planning_prompt = extract_planning_prompt(generated_str)
            except Exception as e:
                print(f"[Speculator thread {thread_id}] Error executing code: {e}")

            print(
                f"================ extracted planning prompt ==========================\n{planning_prompt}\n"
            )

            # Log
            os.makedirs(f"cache/tetris/thread_{thread_id}", exist_ok=True)
            os.makedirs(f"cache/tetris/thread_{thread_id}/planner", exist_ok=True)
            log_output(
                thread_id,
                f"[Speculator thread {thread_id}] Latest planning prompt:\n{planning_prompt}\n",
                "tetris",
                "planner",
            )
            print(
                f"[Speculator thread {thread_id}] Latest planning prompt:\n{planning_prompt}\n"
            )

            # Update latest planning prompt
            with open(
                f"cache/tetris/thread_{thread_id}/planner/experience_summary.log",
                "w",
                encoding="utf-8",
            ) as f:
                f.write(planning_prompt)

            time.sleep(wait_time)

    except KeyboardInterrupt:
        print(f"[Thread {thread_id}] Interrupted by user. Exiting...")
